<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
<head>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Lode Runner par Charles Morin et Andrew Aboujaoudé</title>
  <link href='https://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet'>
  <!-- Code JavaScript local -->
  <script type="text/javascript">
	let objCanvas = null;
	let objC2D = null;
	let objCycleAnimation = null;

	//
	const CELL_HEIGHT = 17;
	const CELL_WIDTH = 28;
	const CELL_DIMENSION = 32;

	//Images
	let imgNiveau = null;
	let imgEchelle = null;
	let imgBrique = null;
	let imgBeton = null;
	let imgCoffre = null;

	//Objet
	let objLodeRunner = null;
	let objGUI = null;

	//Niveau
	let tabNiveau = new Array();

	function initAnimation() {
        objCanvas = document.getElementById('monCanvas');
		objCanvas.focus();
        objC2D = objCanvas.getContext('2d');
		initSprites();
		initNiveau();
		initGUI();
	    dessiner(); // Dessiner une première fois
        animer();  // animer
    }

	function initGUI() {
		objGUI = new Object;
		objGUI.intScore = 0;
		objGUI.objDate = new Date();
		objGUI.intTime = 0;
		objGUI.intNiveau = 1;
		objGUI.intVies = 5;
	}

	function initLodeRunner() {
		let imgLodeRunner = new Image();
		imgLodeRunner.src = 'lodeRunner.png';

		objLodeRunner = new Object;
		//Sprite de LodeRunner
		objLodeRunner.sprite = imgLodeRunner;
		//Coordonnées
		objLodeRunner.fltX = (CELL_WIDTH * CELL_DIMENSION) / 2;
		objLodeRunner.fltY = (CELL_HEIGHT * CELL_DIMENSION);
		//Vitesse
		objLodeRunner.fltVitesse = 5;

	}

	/**
	 * Initialiser le niveau
	 * MAP CONVERT rgb
	 *BRICK = RED(255, 0, 0)
	 *COFFRE = JAUNE(225, 225, 0)
     *ECHELLE = BRUN(130, 70, 25)
	 *BARRIER = BLUE(0, 0, 255)
	 * -1 = vide
	 * 0  = échelle
	 * 1 = brique
	 * 2 = coffre
	 * 3 = barrier
	 */
	function initNiveau() {
		objC2D.save();
		//Charger l'image du niveau

		imgNiveau = new Image();
		imgNiveau.src = 'niveauTest.png';
		let tableauTemp = new Array();

		imgNiveau.onload = function() {
			//Dessiner l'image sur le canvas
			objC2D.drawImage(imgNiveau, 0, 0);

			//Convertir l'image en un tableau de pixels
			const objPixels = objC2D.getImageData(0, 0, CELL_WIDTH, CELL_HEIGHT);

			//Lire les pixels
			let cell_id = 0;
			for(let p = 0; p < objPixels.data.length; p += 4) {
						
				const RED = objPixels.data[p];
				const GREEN = objPixels.data[p + 1];
				const BLUE = objPixels.data[p + 2];

				//console.log("RGB("+RED+", "+GREEN+", "+BLUE+")");
				//Si le pixel est Brun(130, 70, 25) alors la case est une échelle
				if((RED >= 125 && RED <= 135) && (GREEN >= 65 && GREEN <= 75) && (BLUE >= 20 && BLUE <= 30))
					tableauTemp[cell_id] = creerBloc(0);
				//Si le pixel est Rouge(255, 0, 0) alors la case est une brique
				else if(RED >= 254 && GREEN <= 5 && BLUE <= 5)
					tableauTemp[cell_id]  = creerBloc(1);
				//Si le pixel est Jaune(225, 225, 0) alors la case est un coffre
				else if((RED >= 220 && RED <= 230) && (GREEN >= 220 && GREEN <= 230) && BLUE <= 5)
					tableauTemp[cell_id]  = creerBloc(2);
				else if(RED <= 5 && GREEN <= 5 && BLUE >= 254)
					tableauTemp[cell_id]  = creerBloc(3);
				//Sinon la case est vide
				else 
					tableauTemp[cell_id]  = creerBloc(-1);
				cell_id++;
			}

			console.log("Tableau remplit -> Size: "+tableauTemp.length+" [32x32] Blocs");
			//console.log("Size: "+tableauTemp.length);

			//Séparer le tableau en un tableau a 2 dimensions
			let ligne = 0;
			while(tableauTemp.length) {
				tabNiveau[ligne] = tableauTemp.splice(0, 28);
				ligne++;
			}
			console.log("Tableau Séparé:");
			console.log("Ancien Tableau: "+tableauTemp.length);
			console.log("Nouveau Tableau: "+tabNiveau.length);
			//console.log(tabNiveau[1][2]);
			effacerDessin();
		}
	}

	/**
	 *Function qui créer un objet bloc en fonction du bloc_id qu'il recoit en paramètres
	 *@param {number} bloc_id L'id du bloc que la fonction doit créer
	 *@return un objet représentant un bloc du niveau.
	 **/
	function creerBloc(bloc_id) {
		console.log(bloc_id)
		let objBloc = new Object();
		//sprite image
		let strNomBlock = "";
		let objImage = null;
		let isSolid = false;
		switch(bloc_id) {
			case 0:
				strNomBlock = "ECHELLE";
				objImage = imgEchelle;
				break;
			case 1:
				strNomBlock = "BRIQUE";
				objImage = imgBrique;
				isSolid = true;
				break;
			case 2:
				strNomBlock = "COFFRE";
				objImage = imgCoffre;
				break;
			case 3:
				strNomBlock = "BETON";
				objImage = imgBeton;
				isSolid = true;
				break;
			default:
				strNomBlock = "VIDE";
				objImage = new Image();
				isSolid = false;
				break;
		}
		//
		//Nom du block
		objBloc.strNom = strNomBlock;
		//sprite image
		objBloc.sprite = objImage;
		//SOLID BLOCK
		objBloc.isSolid = isSolid;

	return objBloc;

	}

	/**
     *Fonction qui charge toutes les images nécèssaires au jeu
	 */
	function initSprites() {
		imgEchelle = new Image();
		imgEchelle.src = 'echelle.png';
		imgBrique = new Image();
		imgBrique.src = 'brique.png';
		imgCoffre = new Image();
		imgCoffre.src = 'coffre.png';
		imgBeton = new Image();
		imgBeton.src = 'beton.png';
	}

    // Un cycle d'animation	
    function animer() {
        // Requête pour le prochain cycle
        objCycleAnimation = requestAnimationFrame(animer);

		// Le cycle d'animation
		effacerDessin();
		mettreAjourAnimation();
		dessiner();
	}

    // Arrêter l'animation
	function arreterAnimation() {
	    if (objCycleAnimation != null)
	        cancelAnimationFrame(objCycleAnimation);
		objCycleAnimation = null;
	}
		
	// Pour effacer le dessin
	function effacerDessin() {
		objC2D.clearRect(0,0, objCanvas.width, objCanvas.height); 
	}
	
	// Pour mettre à jour l'animation
	function mettreAjourAnimation() {
		//Update Gui
		mettreAjourGUI();
	}

	function mettreAjourGUI() {
		//update Score
		//mettreAjourScore();
		//update Temps
		mettreAjourTemps();
	}

	function mettreAjourTemps() {
    	let objDate2 =  new Date();
        if(objGUI.objDate != null && objDate2 != null) {
            let msDifference = objDate2.getTime() - objGUI.objDate.getTime();
            objGUI.objDate = objDate2;
            objGUI.intTime += msDifference;
        }
	}

    // Pour dessiner
	function dessiner() {
		dessinerNiveau();
		dessinerGUI();
		dessinerDebug();
	}

	function dessinerGUI() {
		objC2D.save();
		//Dessiner le background du GUI
		objC2D.fillStyle = 'black';
		objC2D.fillRect(0, CELL_DIMENSION*CELL_HEIGHT, objCanvas.width, objCanvas.height);

		/*
		for(let i = 0; i < 3; i++) {
			for(let j = 0; j < CELL_WIDTH; j++) {
				objC2D.drawImage(imgBarrier, j * CELL_DIMENSION, objCanvas.height - i * CELL_DIMENSION);
			}
		}
		*/

		objC2D.font = '20px Audiowide';
		objC2D.fillStyle = 'orange';
		//Afficher Score
			//MAX_SCORE est 9 999 999
		objC2D.fillText(getScoreFormat(objGUI.intScore), 50, objCanvas.height - CELL_DIMENSION);
		//Afficher Temps
		objC2D.fillText("Temps: "+getTimeText(objGUI.intTime), 300, objCanvas.height - CELL_DIMENSION);
		//Afficher Niveau
		objC2D.fillText("Niveau: "+objGUI.intNiveau, 500, objCanvas.height - CELL_DIMENSION);
		//Afficher Vie
		objC2D.fillText("Vies: "+objGUI.intVies, 650, objCanvas.height - CELL_DIMENSION);
		objC2D.restore();
	}

	function dessinerNiveau() {
		objC2D.save();
		dessinerBackground();
		for(let i = 0; i < tabNiveau.length; i++) {
			for(let j = 0; j < tabNiveau[i].length; j++) {
				objC2D.drawImage(tabNiveau[i][j].sprite, j * 32, i * 32);
			}
		}
		objC2D.restore();
	}

	function dessinerBackground() {
		objC2D.save();
		objC2D.fillStyle = 'black';
		objC2D.fillRect(0, 0, objCanvas.width, objCanvas.height);
		objC2D.restore();
	}

	function dessinerDebug() {
		objC2D.save();
		//GRID
		for(let i = 0; i < CELL_WIDTH; i++) {
			for(let j = 0; j < CELL_HEIGHT; j++) {
				objC2D.lineWidth = 2;
				objC2D.strokeStyle = 'green';
				objC2D.strokeRect(i * CELL_DIMENSION, j * CELL_DIMENSION, CELL_DIMENSION, CELL_DIMENSION);
			}
		}

		//HITBOX LODE RUNNER
		//HITBOX GUARD

		//HITBOX BRIQUE
		//HITBOX ECHELLE
		//HITBOX BARRIER
		//HITBOX BARRE
		//HITBOX COFFRE
		objC2D.restore();
	}

	function getScoreFormat(intScore) {
		let strPadding = "0000000";
		return "Score: "+strPadding.substring(0, (strPadding.length - intScore.toString().length)) + intScore.toString();
	}

	function getTimeText(ms) {
          let timePassed = new Date(0);
          timePassed.setHours(0, 0, 0, ms);

          const STR_MINUTES = (timePassed.getMinutes() < 10) ? "0"+timePassed.getMinutes():timePassed.getMinutes();
          const STR_SECONDS = (timePassed.getSeconds() < 10) ? "0"+timePassed.getSeconds():timePassed.getSeconds();

          return STR_MINUTES+":"+STR_SECONDS;;
      }

	function gererControle() {
		console.log("KeyCode -> "+event.keyCode);
		console.log("Key -> "+event.key);
		console.log("Code -> "+event.code);
		//Bouger droite
		//Bouger gauche
		//Monter
		//Descendre
		//Détruire
	}

   </script>
</head>

<body onload="initAnimation()"> 
	<canvas id="monCanvas" width="896" height="608" tabIndex="1" onkeydown="gererControle(); return false">
		Votre navigateur ne supporte pas la balise canvas
	</canvas>
</body>

</html>